package app.services;import app.dtos.ShortUrlDto;import app.infrastructure.sequence.SequenceClient;import app.model.UrlMapping;import com.google.inject.Inject;import com.google.inject.Singleton;import com.google.inject.name.Named;import io.reactivex.Observable;import java.time.LocalDateTime;import java.util.List;import java.util.stream.Stream;import javax.persistence.EntityManager;import javax.persistence.EntityTransaction;import javax.persistence.PersistenceContext;import javax.persistence.Query;@Singletonpublic class UrlService {    private final SequenceClient sequenceClient;    private final EncoderService encoderService;    @PersistenceContext    private final EntityManager entityManager;    @Inject    public UrlService(        EncoderService encoderService,        @Named("sequence-client") SequenceClient sequenceClient,        EntityManager entityManager    ) {        this.encoderService = encoderService;        this.sequenceClient = sequenceClient;        this.entityManager = entityManager;    }    public Observable<ShortUrlDto> getShortUrl(String longUrl) {        return this.sequenceClient.getId().map(id -> {            Stream<UrlMapping> result = this.entityManager                .createQuery("select u from UrlMapping u where u.longUrl =:long_url")                .setParameter("long_url", longUrl)                .getResultStream();            if (result.findFirst().isPresent()) {                return new ShortUrlDto();            }            String code = this.encoderService.convertId(id);            UrlMapping urlMapping = new UrlMapping();            urlMapping.id = id;            urlMapping.shortUrl = code;            urlMapping.longUrl = longUrl;            urlMapping.createdDate = LocalDateTime.now();            urlMapping.expirationDate = urlMapping.createdDate.plusDays(14);            EntityTransaction entityTransaction = entityManager.getTransaction();            entityTransaction.begin();            this.entityManager.persist(urlMapping);            entityTransaction.commit();            ShortUrlDto shortUrlDto = new ShortUrlDto();            shortUrlDto.url = code;            return shortUrlDto;        });    }}