package app.services;import static org.junit.jupiter.api.Assertions.assertEquals;import static org.junit.jupiter.api.Assertions.assertNotNull;import static org.mockito.ArgumentMatchers.anyString;import static org.mockito.Mockito.mock;import static org.mockito.Mockito.when;import app.dtos.ShortUrlDto;import app.infrastructure.sequence.SequenceClient;import io.reactivex.Observable;import java.util.ArrayList;import javax.persistence.EntityManager;import javax.persistence.EntityTransaction;import javax.persistence.Query;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.Test;public class UrlServiceTest {    private EncoderService encoderService;    private UrlService urlService;    private SequenceClient sequenceClient;    private EntityManager entityManager;    @BeforeEach    void setUp() {        this.encoderService = mock(EncoderService.class);        this.sequenceClient = mock(SequenceClient.class);        this.entityManager = mock(EntityManager.class);        this.urlService = new UrlService(            this.encoderService,            this.sequenceClient,            this.entityManager        );    }    @Test    public void get_short_url() {        when(this.sequenceClient.getId()).thenReturn(Observable.just(1L));        when(this.entityManager.createQuery(anyString())).thenReturn(mock(Query.class));        when(this.entityManager.createQuery(anyString())            .setParameter(anyString(), anyString())).thenReturn(mock(Query.class));        when(this.entityManager.createQuery(anyString()).setParameter(anyString(), anyString())            .getResultList()).thenReturn(new ArrayList<>());        when(this.entityManager.getTransaction()).thenReturn(mock(EntityTransaction.class));        when(this.encoderService.convertId(1L)).thenReturn("abc");        ShortUrlDto actual = this.urlService.getShortUrl("https://www.contoso.com").blockingFirst();        assertNotNull(actual);        assertNotNull(actual.url);        assertEquals("abc", actual.url);    }}